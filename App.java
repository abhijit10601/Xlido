/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import com.crio.xlido.entities.Event;
import com.crio.xlido.entities.Question;
import com.crio.xlido.entities.User;
import com.crio.xlido.repositories.EventRepository;
import com.crio.xlido.repositories.IEventRepository;
import com.crio.xlido.repositories.IQuestionRepository;
import com.crio.xlido.repositories.IReplierRepository;
import com.crio.xlido.repositories.IUserRepository;
import com.crio.xlido.repositories.QuestionRepository;
import com.crio.xlido.repositories.ReplierRepository;
import com.crio.xlido.repositories.UserRepository;
import com.crio.xlido.services.EventService;
import com.crio.xlido.services.QuestionService;
import com.crio.xlido.services.UserService;

public class App {

    private final IUserRepository userRepository = new UserRepository();
    private final IEventRepository eventRepository = new EventRepository();
    private final IQuestionRepository questionRepository = new QuestionRepository();
    private final IReplierRepository replierRepository = new ReplierRepository();

    private final UserService userService = new UserService(userRepository);
    private final EventService eventService = new EventService(eventRepository, userRepository);
    private final QuestionService questionService = new QuestionService(eventRepository, userRepository, questionRepository, replierRepository);


    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }        

        // OR
        // Test your code by adding commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
            }
        };

        new App().run(inplace_commands);
 
    }
    
    public void run(List<String> commands){

        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(","));

                try {
                    //Execute Services
                    switch(tokens.get(0)){
                        case "CREATE_USER":
                            CREATE_USER(tokens);
                            break;
                        case "CREATE_EVENT":
                            CREATE_EVENT(tokens);
                            break;
                        case "DELETE_EVENT":
                            DELETE_EVENT(tokens);
                            break;
                        case "ADD_QUESTION":
                            CREATE_QUESTION(tokens);
                            break;
                        case "DELETE_QUESTION":
                            DELETE_QUESTION(tokens);
                            break;
                        case "UPVOTE_QUESTION":
                            UPVOTE_QUESTION(tokens);
                            break;
                        case "REPLY_QUESTION":
                            REPLY_QUESTION(tokens);
                            break;
                        case "LIST_QUESTIONS":
                            LIST_QUESTIONS(tokens);
                            break;
                        default:
                            throw new RuntimeException("INVALID_COMMAND");
                }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }

    // CREATE_USER
    private void CREATE_USER(List<String> tokens){
        String email = tokens.get(1);
        String password = tokens.get(2);
        User user = userService.createUser(email, password);

        System.out.println("User ID: " + user.getId());   
    }

    // CREATE_EVENT
    private void CREATE_EVENT(List<String> tokens){
        String name = tokens.get(1);
        Long userId = Long.valueOf(tokens.get(2));

        Event event = eventService.createEvent(name, userId);

        System.out.println("Event ID: " + event.getId());
    }

    // DELETE_EVENT
    private void DELETE_EVENT(List<String> tokens){
        Long eventId = Long.valueOf(tokens.get(1));
        Long userId = Long.valueOf(tokens.get(2));

        eventService.deleteEvent(eventId, userId);

        System.out.println("EVENT_DELETED " + eventId);
    }

    // CREATE_QUESTION
    private void CREATE_QUESTION(List<String> tokens){
        String name = tokens.get(1);
        Long userId = Long.valueOf(tokens.get(2));
        Long eventId = Long.valueOf(tokens.get(3));

        Question question = questionService.createQuestion(name, userId, eventId);

        System.out.println("Question ID: " + question.getId());
    }

    // DELETE_QUESTION
    private void DELETE_QUESTION(List<String> tokens){
        Long questionId = Long.valueOf(tokens.get(1));
        Long userId = Long.valueOf(tokens.get(2));

        questionService.deleteQuestion(questionId, userId);

        System.out.println("QUESTION_DELETED " + questionId);
    }

    // UPVOTE_QUESTION
    private void UPVOTE_QUESTION(List<String> tokens){
        Long questionId = Long.valueOf(tokens.get(1));
        Long userId = Long.valueOf(tokens.get(2));

        questionService.upvoteQuestion(questionId, userId);

        System.out.println("QUESTION_UPVOTED " + questionId);
    }

    // REPLY_QUESTION
    private void REPLY_QUESTION(List<String> tokens){
        String reply = tokens.get(1);
        Long questionId = Long.valueOf(tokens.get(2));
        Long userId = Long.valueOf(tokens.get(3));
        
        questionService.replyQuestion(questionId, userId, reply);

        System.out.println("REPLY_ADDED");
    }

    // LIST_QUESTIONS
    private void LIST_QUESTIONS(List<String> tokens){
        Long eventId = Long.valueOf(tokens.get(1));
        String sortMethod = tokens.get(2);

        questionService.listAllQuestions(eventId, sortMethod);
    }
}
